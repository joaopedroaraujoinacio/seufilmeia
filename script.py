import streamlit as st
import google.generativeai as genai

api_key = st.secrets['API_KEY']
genai.configure(api_key=api_key)

model = genai.GenerativeModel("gemini-2.0-flash")

def sugerir_filme_gemini(prompt):
    try:
        response = model.generate_content(prompt)
        return response.text
    except Exception as e:
        return f"Erro ao gerar sugest√£o de filme: {str(e)}"

st.set_page_config(page_title="Seu Filme.IA", layout="centered")

st.title("Seu Filme.IA")
st.markdown("Deixe a intelig√™ncia artificial te ajudar a encontrar **filmes incr√≠veis** com base nas suas prefer√™ncias!")

st.header("Suas Prefer√™ncias Principais")
st.markdown("Selecione os crit√©rios b√°sicos para o filme ideal.")

faixa_etaria = st.selectbox(
    "Para qual faixa et√°ria √© o filme?",
    ("Livre", "10+", "12+", "14+", "16+", "18+")
)

duracao = st.select_slider(
    "Qual a dura√ß√£o aproximada que voc√™ prefere?",
    options=["Curta (at√© 90 min)", "M√©dia (90-120 min)", "Longa (acima de 120 min)"]
)

nota_preferencia = st.slider(
    "Qual a nota m√≠nima que o filme deve ter (de 1 a 5)?",
    min_value=1.0,
    max_value=5.0,
    value=3.5,
    step=0.5
)

genero = st.multiselect(
    "Quais g√™neros voc√™ gostaria?",
    ["A√ß√£o", "Aventura", "Com√©dia", "Drama", "Fic√ß√£o Cient√≠fica", "Terror", "Romance", "Anima√ß√£o", "Document√°rio", "Fantasia", "Suspense", "Musical"],
    default=["Drama", "Fic√ß√£o Cient√≠fica"]
)

st.header("Prefer√™ncias Adicionais (Opcional)")
st.markdown("Quer refinar ainda mais? Adicione detalhes de ano e atores.")

ano_lancamento = st.text_input("A partir de qual ano de lan√ßamento?", placeholder="Ex: 2000")
atores_atrizes = st.text_input("Atores ou Atrizes que voc√™ gostaria?", placeholder="Ex: Tom Hanks, Meryl Streep")

# Novo seletor: n√∫mero de sugest√µes
num_filmes = st.slider(
    "Quantos filmes deseja receber?",
    min_value=1,
    max_value=10,
    value=5
)

# Controle de estado para manter o prompt entre cliques
if "ultimo_prompt" not in st.session_state:
    st.session_state.ultimo_prompt = ""
if "ultimo_num" not in st.session_state:
    st.session_state.ultimo_num = 5

def gerar_prompt():
    generos_str = ", ".join(genero)
    prompt = (
        f"Com base nas prefer√™ncias abaixo, sugira {num_filmes} filmes que **existem de verdade** e que podem ser verificados em fontes como IMDb ou Rotten Tomatoes.\n"
        f"N√£o invente filmes fict√≠cios. N√£o inclua observa√ß√µes ou coment√°rios adicionais ap√≥s as sugest√µes.\n"
        f"Cada sugest√£o deve conter apenas as informa√ß√µes pedidas. Nada al√©m disso.\n\n"
        f"Crit√©rios:\n"
        f"- Faixa Et√°ria: {faixa_etaria}\n"
        f"- Dura√ß√£o: {duracao}\n"
        f"- Nota M√≠nima Esperada: {nota_preferencia} de 5\n"
        f"- G√™neros: {generos_str}\n"
    )

    if ano_lancamento:
        prompt += f"- Ano de Lan√ßamento a partir de: {ano_lancamento}\n"
    if atores_atrizes:
        prompt += f"- Atores/Atrizes sugeridos: {atores_atrizes}\n"

    prompt += (
        f"\nPara cada filme, apresente as seguintes informa√ß√µes:\n"
        f"T√≠tulo: [T√≠tulo do Filme]\n"
        f"Sinopse: [Breve Sinopse - m√°ximo de duas linhas]\n"
        f"Dura√ß√£o: [Dura√ß√£o aproximada]\n"
        f"Faixa Et√°ria: [Faixa Et√°ria]\n"
        f"G√™neros: [G√™neros]\n"
        f"Nota de Cr√≠tica: [Nota de 1 a 5, ex: '4.2/5 (Cr√≠ticos IMDb)']\n"
        f"---\n"
    )
    return prompt

# Bot√µes lado a lado
col1, col2 = st.columns([1, 1])

with col1:
    gerar = st.button("üé• Sugerir Filmes")

with col2:
    gerar_novos = st.button("üîÑ Gerar Novos Filmes")

# L√≥gica de sugest√£o
if gerar or gerar_novos:
    if not genero:
        st.warning("Por favor, selecione pelo menos um g√™nero para a sugest√£o.")
    else:
        if gerar:
            prompt = gerar_prompt()
            st.session_state.ultimo_prompt = prompt
            st.session_state.ultimo_num = num_filmes
        else:  # bot√£o "Gerar Novos Filmes"
            prompt = st.session_state.ultimo_prompt
            num_filmes = st.session_state.ultimo_num  # manter valor anterior

        with st.spinner("Procurando os filmes perfeitos para voc√™..."):
            filmes_sugeridos_raw = sugerir_filme_gemini(prompt)

        st.subheader("Suas Sugest√µes de Filmes:")

        filmes_list = filmes_sugeridos_raw.strip().split('---\n')
        for i, filme_text in enumerate(filmes_list[:num_filmes]):
            if filme_text.strip():
                st.markdown(f"### üé¨ Filme {i+1}")
                lines = filme_text.strip().split('\n')
                for line in lines:
                    if line.strip():
                        if "T√≠tulo:" in line:
                            clean_title = line.replace('T√≠tulo:', '').replace('**', '').strip()
                            st.markdown(f"**{clean_title}**")
                        elif "Sinopse:" in line:
                            clean_synopsis = line.replace('Sinopse:', '').replace('**', '').strip()
                            st.markdown(f"*{clean_synopsis}*")
                        else:
                            clean_line = line.replace('**', '').strip()
                            st.write(clean_line)
                st.markdown("---")
